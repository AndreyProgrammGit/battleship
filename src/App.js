import { io } from 'socket.io-client';
import { useEffect, useState, useRef } from 'react';
import GameBoard from './components/GameBoard/GameBoard.jsx';

const createEmptyBoard = () =>
  Array(10)
    .fill(null)
    .map(() =>
      Array(10)
        .fill(null)
        .map(() => ({
          ship: false,
          hit: false,
          miss: false,
        }))
    );

function App() {
  const [myBoard, setMyBoard] = useState(createEmptyBoard);
  const [opponentBoard, setOpponentBoard] = useState(createEmptyBoard); // –£–±—Ä–∞–ª–∏ enemyBoard
  const [isPlacing, setIsPlacing] = useState(true);
  const [currentShipSize, setCurrentShipSize] = useState(4);
  const [shipsToPlace, setShipsToPlace] = useState({
    4: 1,
    3: 2,
    2: 3,
    1: 4,
  });
  const [orientation, setOrientation] = useState('horizontal');
  const [isReady, setIsReady] = useState(false);
  const [opponentReady, setOpponentReady] = useState(false);
  const [playerRole, setPlayerRole] = useState(null);
  const [currentTurn, setCurrentTurn] = useState(null);
  const [gameStarted, setGameStarted] = useState(false);
  const socketRef = useRef(null);
  const playerRoleRef = useRef(null);

  useEffect(() => {
    playerRoleRef.current = playerRole;
  }, [playerRole]);

  useEffect(() => {
    socketRef.current = io('http://localhost:3000');

    socketRef.current.on('opponentReady', (data) => {
      setOpponentReady(true);
    });

    socketRef.current.on('bothReady', ({ role, yourTurn }) => {
      setPlayerRole(role);
      playerRoleRef.current = role;
      setCurrentTurn(yourTurn ? role : role === 'player1' ? 'player2' : 'player1');
      setGameStarted(true);
    });

    socketRef.current.on('fireResult', ({ x, y, hit, board, yourTurn, isYourShot }) => {
      console.log('fireResult:', { x, y, hit, yourTurn, isYourShot });

      if (!playerRoleRef.current) {
        return;
      }

      if (isYourShot) {
        // –¢—ã —Å—Ç—Ä–µ–ª—è–ª - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        setOpponentBoard(board);
      } else {
        // –ü–æ —Ç–µ–±–µ —Å—Ç—Ä–µ–ª—è–ª–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ—é –¥–æ—Å–∫—É
        setMyBoard(board);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ–¥
      setCurrentTurn(yourTurn ? playerRoleRef.current :
        (playerRoleRef.current === 'player1' ? 'player2' : 'player1'));
    });

    return () => {
      socketRef.current?.disconnect();
    };
  }, []);

  const handleOpponentCellClick = (row, col) => {
    console.log('Fire at:', row, col);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à –ª–∏ —Ö–æ–¥
    if (currentTurn !== playerRoleRef.current) {
      console.log('–ù–µ —Ç–≤–æ–π —Ö–æ–¥!');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –ª–∏ —É–∂–µ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É
    const cell = opponentBoard[row][col];
    if (cell.hit || cell.miss) {
      console.log('–£–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É!');
      return;
    }

    socketRef.current.emit('fire', { x: col, y: row });
  };

  const canPlaceShip = (board, row, col, size, orientation) => {
    const deltas = orientation === 'horizontal' ? [0, 1] : [1, 0];

    for (let i = 0; i < size; i++) {
      const r = row + i * deltas[0];
      const c = col + i * deltas[1];

      if (r < 0 || r >= 10 || c < 0 || c >= 10) return false;
      if (board[r][c].ship) return false;

      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ (–∫–æ–Ω—Ç—É—Ä)
      for (let dr = -1; dr <= 1; dr++) {
        for (let dc = -1; dc <= 1; dc++) {
          const nr = r + dr;
          const nc = c + dc;
          if (
            nr >= 0 &&
            nr < 10 &&
            nc >= 0 &&
            nc < 10 &&
            board[nr][nc].ship
          ) {
            return false;
          }
        }
      }
    }

    return true;
  };

  const placeShip = (row, col) => {
    if (!isPlacing || shipsToPlace[currentShipSize] <= 0) return;

    if (!canPlaceShip(myBoard, row, col, currentShipSize, orientation)) return;

    const deltas = orientation === 'horizontal' ? [0, 1] : [1, 0];
    const updated = myBoard.map((r) => r.map((c) => ({ ...c })));

    for (let i = 0; i < currentShipSize; i++) {
      const r = row + i * deltas[0];
      const c = col + i * deltas[1];
      updated[r][c].ship = true;
    }

    setMyBoard(updated);

    setShipsToPlace((prevShips) => {
      const newShips = { ...prevShips, [currentShipSize]: prevShips[currentShipSize] - 1 };

      // –ù–∞–π–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –æ—Å—Ç–∞–ª—Å—è
      const nextSize = [4, 3, 2, 1].find((size) => newShips[size] > 0);

      if (nextSize) {
        setCurrentShipSize(nextSize);
      } else {
        setIsPlacing(false);
      }

      return newShips;
    });
  };

  const removeShipAt = (row, col) => {
    const cell = myBoard[row][col];
    if (!cell.ship) return;

    // –û–±—Ö–æ–¥ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–µ—Å—å –∫–æ—Ä–∞–±–ª—å
    const directions = [
      [0, 1],  // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ ‚Üí
      [1, 0],  // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ ‚Üì
      [0, -1], // ‚Üê
      [-1, 0], // ‚Üë
    ];

    let shipCells = [{ row, col }];

    for (const [dr, dc] of directions) {
      let r = row + dr;
      let c = col + dc;

      while (r >= 0 && r < 10 && c >= 0 && c < 10 && myBoard[r][c].ship) {
        shipCells.push({ row: r, col: c });
        r += dr;
        c += dc;
      }
    }

    // –£–¥–∞–ª—è–µ–º –∫–æ—Ä–∞–±–ª—å
    const updated = myBoard.map((r) => r.map((c) => ({ ...c })));

    shipCells.forEach(({ row, col }) => {
      updated[row][col].ship = false;
    });

    setMyBoard(updated);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∫–æ—Ä–∞–±–ª–µ–π
    const shipSize = shipCells.length;
    setShipsToPlace((prev) => ({
      ...prev,
      [shipSize]: prev[shipSize] + 1,
    }));

    // –ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å ‚Äî –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–Ω–æ–≤–∞
    setIsPlacing(true);
    setCurrentShipSize(shipSize);
  };

  return (
    <>
      <div style={{ marginBottom: '1rem' }}>
        <h3>–ö–æ—Ä–∞–±–ª–∏ –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏:</h3>
        <ul>
          {[4, 3, 2, 1].map((size) => (
            <li
              key={size}
              style={{
                fontWeight: currentShipSize === size ? 'bold' : 'normal',
                color: shipsToPlace[size] === 0 ? '#888' : '#000',
                cursor: shipsToPlace[size] > 0 ? 'pointer' : 'default',
              }}
              onClick={() => {
                if (shipsToPlace[size] > 0) setCurrentShipSize(size);
              }}
            >
              {size}-–ø–∞–ª—É–±–Ω—ã–π: {shipsToPlace[size]} —à—Ç
            </li>
          ))}
        </ul>

        <button onClick={() =>
          setOrientation((o) => (o === 'horizontal' ? 'vertical' : 'horizontal'))
        }>
          –ü–æ–≤–æ—Ä–æ—Ç ({orientation})
        </button>
      </div>

      {!isReady && !isPlacing && (
        <button onClick={() => {
          socketRef.current.emit('placeShips', myBoard);
          setIsReady(true);
        }}>
          ‚úÖ –ì–æ—Ç–æ–≤
        </button>
      )}

      {isReady && !opponentReady && <p>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...</p>}
      {isReady && opponentReady && <p>üî• –û–±–∞ –∏–≥—Ä–æ–∫–∞ –≥–æ—Ç–æ–≤—ã! –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å.</p>}

      <div style={{ display: 'flex', gap: '40px', padding: '2rem' }}>
        <div>
          <h2>üõ°Ô∏è –ú–æ—è –¥–æ—Å–∫–∞</h2>
          <GameBoard
            board={myBoard}
            isOpponent={false}
            onCellClick={placeShip}
            onRightClick={removeShipAt}
          />
        </div>
        <div>
          <h2>üéØ –î–æ—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</h2>
          {gameStarted ? (
            <>
              <GameBoard
                board={opponentBoard}
                isOpponent={true}
                onCellClick={handleOpponentCellClick}
              />
              <p>–°–µ–π—á–∞—Å —Ö–æ–¥: {currentTurn === playerRole ? '—Ç–≤–æ–π' : '–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'}</p>
              {currentTurn === playerRole && <p>üëÜ –ù–∞–∂–º–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É, —á—Ç–æ–±—ã –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å</p>}
            </>
          ) : (
            <p>–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å</p>
          )}
        </div>
      </div>
    </>
  );
}

export default App;